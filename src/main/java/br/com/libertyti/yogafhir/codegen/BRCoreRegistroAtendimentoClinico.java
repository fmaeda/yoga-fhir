package br.com.libertyti.yogafhir.codegen;

import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import java.math.BigDecimal;
import javax.annotation.Nullable;

import org.hl7.fhir.r4.context.IWorkerContext;
import org.hl7.fhir.r4.model.*;
import org.hl7.fhir.r4.profilemodel.PEBuilder;
import org.hl7.fhir.r4.profilemodel.PEInstance;
import org.hl7.fhir.r4.profilemodel.PEBuilder.PEElementPropertiesPolicy;
import org.hl7.fhir.r4.profilemodel.gen.PEGeneratedBase;
import org.hl7.fhir.r4.profilemodel.gen.Min;
import org.hl7.fhir.r4.profilemodel.gen.Max;
import org.hl7.fhir.r4.profilemodel.gen.Label;
import org.hl7.fhir.r4.profilemodel.gen.Doco;
import org.hl7.fhir.r4.profilemodel.gen.BindingStrength;
import org.hl7.fhir.r4.profilemodel.gen.ValueSet;
import org.hl7.fhir.r4.profilemodel.gen.MustSupport;
import org.hl7.fhir.r4.profilemodel.gen.Definition;


// Generated by the HAPI Java Profile Generator, 3/20/25, 3:38 PM

/**
 * A set of healthcare-related information that is assembled together into a single 
 * logical package that provides a single coherent statement of meaning, 
 * establishes its own context and that has clinical attestation with regard to who 
 * is making the statement. A Composition defines the structure and narrative 
 * content necessary for a document. However, a Composition alone does not 
 * constitute a document. Rather, the Composition must be the first entry in a 
 * Bundle where Bundle.type=document, and any other resources referenced from 
 * Composition must be included as subsequent entries in the Bundle (for example 
 * Patient, Practitioner, Encounter, etc.).
 *
 */
public class BRCoreRegistroAtendimentoClinico extends PEGeneratedBase {

  public static final String CANONICAL_URL = "https://br-core.saude.gov.br/fhir/StructureDefinition/br-core-registroatendimentoclinico|1.0.0";

  public enum CompositionStatus {
    PRELIMINARY, // "Preliminary" = http://hl7.org/fhir/composition-status#preliminary
    FINAL, // "Final" = http://hl7.org/fhir/composition-status#final
    AMENDED, // "Amended" = http://hl7.org/fhir/composition-status#amended
    ENTEREDINERROR; // "Entered in Error" = http://hl7.org/fhir/composition-status#entered-in-error

    public static CompositionStatus fromCode(String s) {
        return switch (s) {
            case "preliminary" -> PRELIMINARY;
            case "final" -> FINAL;
            case "amended" -> AMENDED;
            case "entered-in-error" -> ENTEREDINERROR;
            default -> null;
        };
    }

    public static CompositionStatus fromCoding(Coding c) {
      if ("http://hl7.org/fhir/composition-status".equals(c.getSystem()) && "preliminary".equals(c.getCode())) {
        return PRELIMINARY;
      }
      if ("http://hl7.org/fhir/composition-status".equals(c.getSystem()) && "final".equals(c.getCode())) {
        return FINAL;
      }
      if ("http://hl7.org/fhir/composition-status".equals(c.getSystem()) && "amended".equals(c.getCode())) {
        return AMENDED;
      }
      if ("http://hl7.org/fhir/composition-status".equals(c.getSystem()) && "entered-in-error".equals(c.getCode())) {
        return ENTEREDINERROR;
      }
      return null;
    }

    public static CompositionStatus fromCodeableConcept(CodeableConcept cc) {
      for (Coding c : cc.getCoding()) {
        CompositionStatus v = fromCoding(c);
        if (v != null) {
          return v;
        }
      }
      return null;
    }

    public String toDisplay() {
        return switch (this) {
            case PRELIMINARY -> "Preliminary";
            case FINAL -> "Final";
            case AMENDED -> "Amended";
            case ENTEREDINERROR -> "Entered in Error";
            default -> null;
        };
    }

    public String toCode() {
        return switch (this) {
            case PRELIMINARY -> "preliminary";
            case FINAL -> "final";
            case AMENDED -> "amended";
            case ENTEREDINERROR -> "entered-in-error";
            default -> null;
        };
    }

    public Coding toCoding() {
        return switch (this) {
            case PRELIMINARY -> new Coding().setSystem("http://hl7.org/fhir/composition-status").setCode("preliminary");
            case FINAL -> new Coding().setSystem("http://hl7.org/fhir/composition-status").setCode("final");
            case AMENDED -> new Coding().setSystem("http://hl7.org/fhir/composition-status").setCode("amended");
            case ENTEREDINERROR ->
                    new Coding().setSystem("http://hl7.org/fhir/composition-status").setCode("entered-in-error");
            default -> null;
        };
    }

    public CodeableConcept toCodeableConcept() {
      Coding c = toCoding();
      return c == null ? null : new CodeableConcept().addCoding(c);
    }
  }

  @Min("0") @Max("1") @Doco("")
  private String id;  // 

  @Min("0") @Max("*") @Doco("Additional content defined by implementations")
  @Definition("May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.")
  private List<Extension> extensions = new ArrayList<>();  // Additional content defined by implementations

  @Min("0") @Max("*") @Doco("Extensões que não podem ser ignoradas")
  @Definition("Extensões que não podem ser ignoradas")
  private List<Extension> modifierExtensions = new ArrayList<>();  // Extensões que não podem ser ignoradas

  @Min("1") @Max("1") @Doco("Status/Situação da Composition")
  @BindingStrength("required") @ValueSet("http://hl7.org/fhir/ValueSet/composition-status")
  @Definition("Status/Situação da Composition: preliminar, definitivo, alterado, inserido com erro")
  private CompositionStatus status;// @NotNull  // Status/Situação da Composition

  @Min("1") @Max("1") @Doco("Tipo da Composition")
  @BindingStrength("preferred") @ValueSet("http://hl7.org/fhir/ValueSet/doc-typecodes")
  @Definition("Tipo da Composition (fixo em 'Sumário Internacional do Paciente)")
  private CodeableConcept type;// @NotNull  // Tipo da Composition

  @Min("0") @Max("1") @Doco("Sobre quem e/ou sobre o que é a Composition")
  @Definition("Sobre quem e/ou sobre o que é a Composition")
  private Reference subject;  // Sobre quem e/ou sobre o que é a Composition

  @Min("0") @Max("1") @Doco("Contato assistencial descrito nesta Composition")
  @Definition("Contato assistencial descrito nesta Composition")
  private Reference encounter;  // Contato assistencial descrito nesta Composition

  @Min("1") @Max("1") @Doco("Data de edição da Composition")
  @Definition("Data de edição da Composition")
  private Date date;// @NotNull  // Data de edição da Composition

  @Min("1") @Max("*") @Doco("Quem e/ou o que foi o autor desta Composition")
  @Definition("Quem e/ou o que foi o autor desta Compositon")
  private List<Reference> authors = new ArrayList<>();// @NotNull  // Quem e/ou o que foi o autor desta Composition

  @Min("1") @Max("1") @Doco("Sumário Internacional do Paciente")
  @Definition("Sumário Internacional do Paciente")
  private String title;// @NotNull  // Sumário Internacional do Paciente

  @Min("0") @Max("*") @Doco("Responsável por atestar a acurácia da Composition")
  @Definition("Responsável por atestar a acurácia da Composition")
  private List<BackboneElement> attesters = new ArrayList<>();  // Responsável por atestar a acurácia da Composition

  @Min("0") @Max("1") @Doco("Organização responsável pela custódia da Composition")
  @Definition("Identifica a organização ou grupo responsável pela composição.")
  private Reference custodian;  // Organização responsável pela custódia da Composition

  @Min("0") @Max("*") @Doco("Relacionamentos com outras Compositions/Documents")
  @Definition("Relações que esta composição tem com outras composições ou recursos.")
  private List<BackboneElement> relatesTos = new ArrayList<>();  // Relacionamentos com outras Compositions/Documents

  @Min("0") @Max("*") @Doco("Serviços assistenciais documentados")
  @Definition("O serviço especializado  como uma colonoscopia ou uma apendicectomia, sendo documentado.")
  private List<BackboneElement> events = new ArrayList<>();  // Serviços assistenciais documentados

  @Min("1") @Max("*") @Doco("Seções do sumário de alta")
  @Definition("Seções do sumário de alta")
  private List<BackboneElement> sections = new ArrayList<>();// @NotNull  // Seções do sumário de alta

  @Min("1") @Max("*") @Doco("Seção de Resumo de Diagnósticos Admissão")
  @Definition("Seção de Resumo de Diagnósticos Admissão")
  private List<BackboneElement> diagnosticosAvaliados = new ArrayList<>();// @NotNull  // Seção de Resumo de Diagnósticos Admissão

  @Min("0") @Max("1") @Doco("Seção de Resumo de Procedimentos Realizados")
  @Definition("Seção de Resumo de Procedimentos Realizados")
  private BackboneElement procedimentosRealizados;  // Seção de Resumo de Procedimentos Realizados

  @Min("0") @Max("1") @Doco("Seção de Resumo de Sinais Vitais")
  @Definition("Seção de Resumo de Sinais Vitais")
  private BackboneElement sinaisVitais;  // Seção de Resumo de Sinais Vitais

  @Min("0") @Max("1") @Doco("Seção de Resumo de História obstétrica")
  @Definition("Seção de Resumo de História obstétrica")
  private BackboneElement historiaObstetrica;  // Seção de Resumo de História obstétrica

  @Min("0") @Max("1") @Doco("Seção de Resumo de Aleitamento Materno")
  @Definition("Seção de Resumo de Aleitamento Materno")
  private BackboneElement aleitamentoMaterno;  // Seção de Resumo de Aleitamento Materno

  @Min("0") @Max("1") @Doco("Seção de Resumo de História Social")
  @Definition("Seção de Resumo de História Social")
  private BackboneElement historiaSocial;  // Seção de Resumo de História Social

  @Min("0") @Max("1") @Doco("Seção de Resumo de Alergias e Intolerâncias")
  @Definition("Seção de Resumo de Alergias e Intolerâncias")
  private BackboneElement alergiasIntolerancias;  // Seção de Resumo de Alergias e Intolerâncias

  @Min("0") @Max("1") @Doco("Seção de Resumo de Medicamentos")
  @Definition("Seção de Resumo de Medicamentos")
  private BackboneElement medicamentos;  // Seção de Resumo de Medicamentos

  @Min("0") @Max("1") @Doco("Seção de Resumo de Plano de Cuidados")
  @Definition("Seção de Resumo de Plano de Cuidados")
  private BackboneElement planoCuidados;  // Seção de Resumo de Plano de Cuidados

  @Min("0") @Max("1") @Doco("Seção de Resumo de Capacidade Funcional")
  @Definition("Seção de Resumo de Capacidade Funcional")
  private BackboneElement capacidadeFuncional;  // Seção de Resumo de Capacidade Funcional


  /**
   * Parameter-less constructor.
   *
   */
  public BRCoreRegistroAtendimentoClinico() {
  }

  /**
   * Construct an instance of the object, and fill out all the fixed values 
   *
   */
  public BRCoreRegistroAtendimentoClinico(IWorkerContext context) {
    workerContext = context;
    PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance src = builder.buildPEInstance(CANONICAL_URL, builder.createResource(CANONICAL_URL, false));
    load(src);
  }

  /**
   * Populate an instance of the object based on this source object 
   *
   */
  public static BRCoreRegistroAtendimentoClinico fromSource(IWorkerContext context, Composition source) {
    BRCoreRegistroAtendimentoClinico theThing = new BRCoreRegistroAtendimentoClinico();
    theThing.workerContext = context;
    PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance src = builder.buildPEInstance(CANONICAL_URL, source);
    theThing.load(src);
    return theThing;
  }


  public void load(PEInstance src) {
    clear();
    if (src.hasChild("id")) {
      id = ((IdType) src.child("id").asDataType()).getValue();
    }
    for (PEInstance item : src.children("extension")) {
      extensions.add((Extension) item.asDataType());
    }
    for (PEInstance item : src.children("modifierExtension")) {
      modifierExtensions.add((Extension) item.asDataType());
    }
    if (src.hasChild("status")) {
      status = CompositionStatus.fromCode(src.child("status").asDataType().primitiveValue());
    }
    if (src.hasChild("type")) {
      type = (CodeableConcept) src.child("type").asDataType();
    }
    if (src.hasChild("subject")) {
      Reference ref = (Reference) src.child("subject").asDataType();
      if(!ref.isEmpty())
        subject = ref;
    }
    if (src.hasChild("encounter")) {
      Reference ref = (Reference) src.child("encounter").asDataType();
      if(!ref.isEmpty())
        encounter = ref;
    }
    if (src.hasChild("date")) {
      date = ((DateTimeType) src.child("date").asDataType()).getValue();
    }
    for (PEInstance item : src.children("author")) {
      authors.add((Reference) item.asDataType());
    }
    if (src.hasChild("title")) {
      title = ((StringType) src.child("title").asDataType()).getValue();
    }
    for (PEInstance item : src.children("attester")) {
      attesters.add((BackboneElement) item.asElement());
    }
    if (src.hasChild("custodian")) {
      Reference ref = (Reference) src.child("custodian").asDataType();
      if(!ref.isEmpty())
        custodian = ref;
    }
    for (PEInstance item : src.children("relatesTo")) {
      relatesTos.add((BackboneElement) item.asElement());
    }
    for (PEInstance item : src.children("event")) {
      events.add((BackboneElement) item.asElement());
    }
    for (PEInstance item : src.children("section")) {
      sections.add((BackboneElement) item.asElement());
    }
    for (PEInstance item : src.children("diagnosticosAvaliados")) {
      diagnosticosAvaliados.add((BackboneElement) item.asElement());
    }
    if (src.hasChild("procedimentosRealizados")) {
      procedimentosRealizados = (BackboneElement) src.child("procedimentosRealizados").asElement();
    }
    if (src.hasChild("sinaisVitais")) {
      sinaisVitais = (BackboneElement) src.child("sinaisVitais").asElement();
    }
    if (src.hasChild("historiaObstetrica")) {
      historiaObstetrica = (BackboneElement) src.child("historiaObstetrica").asElement();
    }
    if (src.hasChild("aleitamentoMaterno")) {
      aleitamentoMaterno = (BackboneElement) src.child("aleitamentoMaterno").asElement();
    }
    if (src.hasChild("historiaSocial")) {
      historiaSocial = (BackboneElement) src.child("historiaSocial").asElement();
    }
    if (src.hasChild("alergiasIntolerancias")) {
      alergiasIntolerancias = (BackboneElement) src.child("alergiasIntolerancias").asElement();
    }
    if (src.hasChild("medicamentos")) {
      medicamentos = (BackboneElement) src.child("medicamentos").asElement();
    }
    if (src.hasChild("planoCuidados")) {
      planoCuidados = (BackboneElement) src.child("planoCuidados").asElement();
    }
    if (src.hasChild("capacidadeFuncional")) {
      capacidadeFuncional = (BackboneElement) src.child("capacidadeFuncional").asElement();
    }

  }

  /**
   * Build a instance of the underlying object based on this wrapping object 
   *
   */
  public Composition build(IWorkerContext context) {
    workerContext = context;
    return build();
  }

  /**
   * Build a instance of the underlying object based on this wrapping object 
   *
   */
  public Composition build() {
    Composition theThing = new Composition();
    PEBuilder builder = new PEBuilder(workerContext, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance tgt = builder.buildPEInstance(CANONICAL_URL, theThing);
    save(tgt, false);
    return theThing;
  }

  /**
   * Save this profile class into an existing resource (overwriting anything that 
   * exists in the profile) 
   *
   */
  public void save(IWorkerContext context, Composition dest, boolean nulls) {
    workerContext = context;
    PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance tgt = builder.buildPEInstance(CANONICAL_URL, dest);
    save(tgt, nulls);
  }

  public void save(PEInstance tgt, boolean nulls) {
    tgt.clear("id");
    if (id != null) {
      tgt.makeChild("id").data().setProperty("value", new IdType(id));
    }
    tgt.clear("extension");
    for (Extension item : extensions) {
      tgt.addChild("extension", item);
    }
    tgt.clear("modifierExtension");
    for (Extension item : modifierExtensions) {
      tgt.addChild("modifierExtension", item);
    }
    tgt.clear("status");
    if (status != null) {
      tgt.addChild("status", status.toCode());
    }
    tgt.clear("type");
    if (type != null) {
      tgt.addChild("type", type);
    }
    tgt.clear("subject");
    if (subject != null) {
      tgt.addChild("subject", subject);
    }
    tgt.clear("encounter");
    if (encounter != null) {
      tgt.addChild("encounter", encounter);
    }
    tgt.clear("date");
    if (date != null) {
      tgt.addChild("date", new DateTimeType(date));
    }
    tgt.clear("author");
    for (Reference item : authors) {
      tgt.addChild("author", item);
    }
    tgt.clear("title");
    if (title != null) {
      tgt.makeChild("title").data().setProperty("value", new StringType(title));
    }
    tgt.clear("attester");
    for (BackboneElement item : attesters) {
      tgt.addChild("attester", item);
    }
    tgt.clear("custodian");
    if (custodian != null) {
      tgt.addChild("custodian", custodian);
    }
    tgt.clear("relatesTo");
    for (BackboneElement item : relatesTos) {
      tgt.addChild("relatesTo", item);
    }
    tgt.clear("event");
    for (BackboneElement item : events) {
      tgt.addChild("event", item);
    }
    tgt.clear("section");
    for (BackboneElement item : sections) {
      tgt.addChild("section", item);
    }
    tgt.clear("diagnosticosAvaliados");
    for (BackboneElement item : diagnosticosAvaliados) {
      tgt.addChild("diagnosticosAvaliados", item);
    }
    tgt.clear("procedimentosRealizados");
    if (procedimentosRealizados != null) {
      tgt.addChild("procedimentosRealizados", procedimentosRealizados);
    }
    tgt.clear("sinaisVitais");
    if (sinaisVitais != null) {
      tgt.addChild("sinaisVitais", sinaisVitais);
    }
    tgt.clear("historiaObstetrica");
    if (historiaObstetrica != null) {
      tgt.addChild("historiaObstetrica", historiaObstetrica);
    }
    tgt.clear("aleitamentoMaterno");
    if (aleitamentoMaterno != null) {
      tgt.addChild("aleitamentoMaterno", aleitamentoMaterno);
    }
    tgt.clear("historiaSocial");
    if (historiaSocial != null) {
      tgt.addChild("historiaSocial", historiaSocial);
    }
    tgt.clear("alergiasIntolerancias");
    if (alergiasIntolerancias != null) {
      tgt.addChild("alergiasIntolerancias", alergiasIntolerancias);
    }
    tgt.clear("medicamentos");
    if (medicamentos != null) {
      tgt.addChild("medicamentos", medicamentos);
    }
    tgt.clear("planoCuidados");
    if (planoCuidados != null) {
      tgt.addChild("planoCuidados", planoCuidados);
    }
    tgt.clear("capacidadeFuncional");
    if (capacidadeFuncional != null) {
      tgt.addChild("capacidadeFuncional", capacidadeFuncional);
    }

  }

  public String getId() {
    return id;
  }

  public BRCoreRegistroAtendimentoClinico setId(String value) {
    this.id = value;
    return this;
  }

  public boolean hasId() {
    return id != null;
  }

  /**
   * May be used to represent additional information that is not part of the basic 
   * definition of the resource. To make the use of extensions safe and manageable, 
   * there is a strict set of governance  applied to the definition and use of 
   * extensions. Though any implementer can define an extension, there is a set of 
   * requirements that SHALL be met as part of the definition of the extension.
   *
   */
  public List<Extension> getExtensions() {
    if (extensions == null) { extensions = new ArrayList<>(); }
    return extensions;
  }

  public boolean hasExtensions() {
    return extensions != null && !extensions.isEmpty();
  }

  public Extension addExtension() {
    Extension theThing = new Extension();
    getExtensions().add(theThing);
    return theThing;
  }

  public boolean hasExtension(Extension item) {
    return hasExtensions() && extensions.contains(item);
  }

  public void removeExtension(Extension item) {
    if (hasExtension(item)) {
      extensions.remove(item);
    }
  }


  /**
   * Extensões que não podem ser ignoradas
   *
   */
  public List<Extension> getModifierExtensions() {
    if (modifierExtensions == null) { modifierExtensions = new ArrayList<>(); }
    return modifierExtensions;
  }

  public boolean hasModifierExtensions() {
    return modifierExtensions != null && !modifierExtensions.isEmpty();
  }

  public Extension addModifierExtension() {
    Extension theThing = new Extension();
    getModifierExtensions().add(theThing);
    return theThing;
  }

  public boolean hasModifierExtension(Extension item) {
    return hasModifierExtensions() && modifierExtensions.contains(item);
  }

  public void removeModifierExtension(Extension item) {
    if (hasModifierExtension(item)) {
      modifierExtensions.remove(item);
    }
  }


  /**
   * Status/Situação da Composition: preliminar, definitivo, alterado, inserido com 
   * erro
   *
   */
  public CompositionStatus getStatus() {
    return status;
  }

  public BRCoreRegistroAtendimentoClinico setStatus(CompositionStatus value) {
    this.status = value;
    return this;
  }

  public boolean hasStatus() {
    return status != null;
  }

  /**
   * Tipo da Composition (fixo em 'Sumário Internacional do Paciente)
   *
   */
  public CodeableConcept getType() {
    if (type == null) { type = new CodeableConcept(); }
    return type;
  }

  public BRCoreRegistroAtendimentoClinico setType(CodeableConcept value) {
    this.type = value;
    return this;
  }
  public boolean hasType() {
    return type != null;
  }

  /**
   * Sobre quem e/ou sobre o que é a Composition
   *
   */
  public Reference getSubject() {
    if (subject == null) { subject = new Reference(); }
    return subject;
  }

  public BRCoreRegistroAtendimentoClinico setSubject(Reference value) {
    this.subject = value;
    return this;
  }
  public boolean hasSubject() {
    return subject != null;
  }

  /**
   * Contato assistencial descrito nesta Composition
   *
   */
  public Reference getEncounter() {
    if (encounter == null) { encounter = new Reference(); }
    return encounter;
  }

  public BRCoreRegistroAtendimentoClinico setEncounter(Reference value) {
    this.encounter = value;
    return this;
  }
  public boolean hasEncounter() {
    return encounter != null;
  }

  /**
   * Data de edição da Composition
   *
   */
  public Date getDate() {
    return date;
  }

  public BRCoreRegistroAtendimentoClinico setDate(Date value) {
    this.date = value;
    return this;
  }

  public boolean hasDate() {
    return date != null;
  }

  /**
   * Quem e/ou o que foi o autor desta Compositon
   *
   */
  public List<Reference> getAuthors() {
    if (authors == null) { authors = new ArrayList<>(); }
    return authors;
  }

  public boolean hasAuthors() {
    return authors != null && !authors.isEmpty();
  }

  public Reference addAuthor() {
    Reference theThing = new Reference();
    getAuthors().add(theThing);
    return theThing;
  }

  public boolean hasAuthor(Reference item) {
    return hasAuthors() && authors.contains(item);
  }

  public void removeAuthor(Reference item) {
    if (hasAuthor(item)) {
      authors.remove(item);
    }
  }


  /**
   * Sumário Internacional do Paciente
   *
   */
  public String getTitle() {
    return title;
  }

  public BRCoreRegistroAtendimentoClinico setTitle(String value) {
    this.title = value;
    return this;
  }

  public boolean hasTitle() {
    return title != null;
  }

  /**
   * Responsável por atestar a acurácia da Composition
   *
   */
  public List<BackboneElement> getAttesters() {
    if (attesters == null) { attesters = new ArrayList<>(); }
    return attesters;
  }

  public boolean hasAttesters() {
    return attesters != null && !attesters.isEmpty();
  }

  public boolean hasAttester(BackboneElement item) {
    return hasAttesters() && attesters.contains(item);
  }

  public void removeAttester(BackboneElement item) {
    if (hasAttester(item)) {
      attesters.remove(item);
    }
  }


  /**
   * Identifica a organização ou grupo responsável pela composição.
   *
   */
  public Reference getCustodian() {
    if (custodian == null) { custodian = new Reference(); }
    return custodian;
  }

  public BRCoreRegistroAtendimentoClinico setCustodian(Reference value) {
    this.custodian = value;
    return this;
  }
  public boolean hasCustodian() {
    return custodian != null;
  }

  /**
   * Relações que esta composição tem com outras composições ou recursos.
   *
   */
  public List<BackboneElement> getRelatesTos() {
    if (relatesTos == null) { relatesTos = new ArrayList<>(); }
    return relatesTos;
  }

  public boolean hasRelatesTos() {
    return relatesTos != null && !relatesTos.isEmpty();
  }

  public boolean hasRelatesTo(BackboneElement item) {
    return hasRelatesTos() && relatesTos.contains(item);
  }

  public void removeRelatesTo(BackboneElement item) {
    if (hasRelatesTo(item)) {
      relatesTos.remove(item);
    }
  }


  /**
   * O serviço especializado  como uma colonoscopia ou uma apendicectomia, sendo 
   * documentado.
   *
   */
  public List<BackboneElement> getEvents() {
    if (events == null) { events = new ArrayList<>(); }
    return events;
  }

  public boolean hasEvents() {
    return events != null && !events.isEmpty();
  }

  public boolean hasEvent(BackboneElement item) {
    return hasEvents() && events.contains(item);
  }

  public void removeEvent(BackboneElement item) {
    if (hasEvent(item)) {
      events.remove(item);
    }
  }


  /**
   * Seções do sumário de alta
   *
   */
  public List<BackboneElement> getSections() {
    if (sections == null) { sections = new ArrayList<>(); }
    return sections;
  }

  public boolean hasSections() {
    return sections != null && !sections.isEmpty();
  }

  public boolean hasSection(BackboneElement item) {
    return hasSections() && sections.contains(item);
  }

  public void removeSection(BackboneElement item) {
    if (hasSection(item)) {
      sections.remove(item);
    }
  }


  /**
   * Seção de Resumo de Diagnósticos Admissão
   *
   */
  public List<BackboneElement> getDiagnosticosAvaliados() {
    if (diagnosticosAvaliados == null) { diagnosticosAvaliados = new ArrayList<>(); }
    return diagnosticosAvaliados;
  }

  public boolean hasDiagnosticosAvaliados() {
    return diagnosticosAvaliados != null && !diagnosticosAvaliados.isEmpty();
  }

  public boolean hasDiagnosticosAvaliados(BackboneElement item) {
    return hasDiagnosticosAvaliados() && diagnosticosAvaliados.contains(item);
  }

  public void removeDiagnosticosAvaliados(BackboneElement item) {
    if (hasDiagnosticosAvaliados(item)) {
      diagnosticosAvaliados.remove(item);
    }
  }


  /**
   * Seção de Resumo de Procedimentos Realizados
   *
   */
  public @Nullable BackboneElement getProcedimentosRealizados() { // BackboneElement is abstract 
    return procedimentosRealizados;
  }

  public BRCoreRegistroAtendimentoClinico setProcedimentosRealizados(BackboneElement value) {
    this.procedimentosRealizados = value;
    return this;
  }
  public boolean hasProcedimentosRealizados() {
    return procedimentosRealizados != null;
  }

  /**
   * Seção de Resumo de Sinais Vitais
   *
   */
  public @Nullable BackboneElement getSinaisVitais() { // BackboneElement is abstract 
    return sinaisVitais;
  }

  public BRCoreRegistroAtendimentoClinico setSinaisVitais(BackboneElement value) {
    this.sinaisVitais = value;
    return this;
  }
  public boolean hasSinaisVitais() {
    return sinaisVitais != null;
  }

  /**
   * Seção de Resumo de História obstétrica
   *
   */
  public @Nullable BackboneElement getHistoriaObstetrica() { // BackboneElement is abstract 
    return historiaObstetrica;
  }

  public BRCoreRegistroAtendimentoClinico setHistoriaObstetrica(BackboneElement value) {
    this.historiaObstetrica = value;
    return this;
  }
  public boolean hasHistoriaObstetrica() {
    return historiaObstetrica != null;
  }

  /**
   * Seção de Resumo de Aleitamento Materno
   *
   */
  public @Nullable BackboneElement getAleitamentoMaterno() { // BackboneElement is abstract 
    return aleitamentoMaterno;
  }

  public BRCoreRegistroAtendimentoClinico setAleitamentoMaterno(BackboneElement value) {
    this.aleitamentoMaterno = value;
    return this;
  }
  public boolean hasAleitamentoMaterno() {
    return aleitamentoMaterno != null;
  }

  /**
   * Seção de Resumo de História Social
   *
   */
  public @Nullable BackboneElement getHistoriaSocial() { // BackboneElement is abstract 
    return historiaSocial;
  }

  public BRCoreRegistroAtendimentoClinico setHistoriaSocial(BackboneElement value) {
    this.historiaSocial = value;
    return this;
  }
  public boolean hasHistoriaSocial() {
    return historiaSocial != null;
  }

  /**
   * Seção de Resumo de Alergias e Intolerâncias
   *
   */
  public @Nullable BackboneElement getAlergiasIntolerancias() { // BackboneElement is abstract 
    return alergiasIntolerancias;
  }

  public BRCoreRegistroAtendimentoClinico setAlergiasIntolerancias(BackboneElement value) {
    this.alergiasIntolerancias = value;
    return this;
  }
  public boolean hasAlergiasIntolerancias() {
    return alergiasIntolerancias != null;
  }

  /**
   * Seção de Resumo de Medicamentos
   *
   */
  public @Nullable BackboneElement getMedicamentos() { // BackboneElement is abstract 
    return medicamentos;
  }

  public BRCoreRegistroAtendimentoClinico setMedicamentos(BackboneElement value) {
    this.medicamentos = value;
    return this;
  }
  public boolean hasMedicamentos() {
    return medicamentos != null;
  }

  /**
   * Seção de Resumo de Plano de Cuidados
   *
   */
  public @Nullable BackboneElement getPlanoCuidados() { // BackboneElement is abstract 
    return planoCuidados;
  }

  public BRCoreRegistroAtendimentoClinico setPlanoCuidados(BackboneElement value) {
    this.planoCuidados = value;
    return this;
  }
  public boolean hasPlanoCuidados() {
    return planoCuidados != null;
  }

  /**
   * Seção de Resumo de Capacidade Funcional
   *
   */
  public @Nullable BackboneElement getCapacidadeFuncional() { // BackboneElement is abstract 
    return capacidadeFuncional;
  }

  public BRCoreRegistroAtendimentoClinico setCapacidadeFuncional(BackboneElement value) {
    this.capacidadeFuncional = value;
    return this;
  }
  public boolean hasCapacidadeFuncional() {
    return capacidadeFuncional != null;
  }



  public void clear() {
    id = null;
    extensions.clear();
    modifierExtensions.clear();
    status = null;
    type = null;
    subject = null;
    encounter = null;
    date = null;
    authors.clear();
    title = null;
    attesters.clear();
    custodian = null;
    relatesTos.clear();
    events.clear();
    sections.clear();
    diagnosticosAvaliados.clear();
    procedimentosRealizados = null;
    sinaisVitais = null;
    historiaObstetrica = null;
    aleitamentoMaterno = null;
    historiaSocial = null;
    alergiasIntolerancias = null;
    medicamentos = null;
    planoCuidados = null;
    capacidadeFuncional = null;

  }

}
