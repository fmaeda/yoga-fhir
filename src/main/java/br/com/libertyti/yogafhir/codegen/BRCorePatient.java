package br.com.libertyti.yogafhir.codegen;

import br.com.libertyti.yogafhir.model.IdentidadeGenero;
import br.com.libertyti.yogafhir.model.RacaCor;
import br.com.libertyti.yogafhir.model.Sexo;
import org.apache.commons.lang3.StringUtils;
import org.hl7.fhir.r4.context.IWorkerContext;
import org.hl7.fhir.r4.model.*;
import org.hl7.fhir.r4.profilemodel.PEBuilder;
import org.hl7.fhir.r4.profilemodel.PEBuilder.PEElementPropertiesPolicy;
import org.hl7.fhir.r4.profilemodel.PEInstance;
import org.hl7.fhir.r4.profilemodel.gen.*;
import org.hl7.fhir.r4.profilemodel.gen.ValueSet;

import java.util.ArrayList;
import java.util.List;


// Generated by the HAPI Java Profile Generator, 3/20/25, 3:34 PM

/**
 * Demographics and other administrative information about an individual or animal
 * receiving care or other health-related services.
 */
public class BRCorePatient extends PEGeneratedBase {

    public static final String CANONICAL_URL = "https://br-core.saude.gov.br/fhir/StructureDefinition/br-core-patient|1.0.0";

    public enum AdministrativeGender {
        MALE, // "Male" = http://hl7.org/fhir/administrative-gender#male
        FEMALE, // "Female" = http://hl7.org/fhir/administrative-gender#female
        OTHER, // "Other" = http://hl7.org/fhir/administrative-gender#other
        UNKNOWN; // "Unknown" = http://hl7.org/fhir/administrative-gender#unknown

        public static AdministrativeGender fromCode(String s) {
            return switch (s) {
                case "male" -> MALE;
                case "female" -> FEMALE;
                case "other" -> OTHER;
                case "unknown" -> UNKNOWN;
                default -> null;
            };
        }

        public static AdministrativeGender fromCoding(Coding c) {
            if ("http://hl7.org/fhir/administrative-gender".equals(c.getSystem()) && "male".equals(c.getCode())) {
                return MALE;
            }
            if ("http://hl7.org/fhir/administrative-gender".equals(c.getSystem()) && "female".equals(c.getCode())) {
                return FEMALE;
            }
            if ("http://hl7.org/fhir/administrative-gender".equals(c.getSystem()) && "other".equals(c.getCode())) {
                return OTHER;
            }
            if ("http://hl7.org/fhir/administrative-gender".equals(c.getSystem()) && "unknown".equals(c.getCode())) {
                return UNKNOWN;
            }
            return null;
        }

        public static AdministrativeGender fromCodeableConcept(CodeableConcept cc) {
            for (Coding c : cc.getCoding()) {
                AdministrativeGender v = fromCoding(c);
                if (v != null) {
                    return v;
                }
            }
            return null;
        }

        public String toDisplay() {
            return switch (this) {
                case MALE -> "Male";
                case FEMALE -> "Female";
                case OTHER -> "Other";
                case UNKNOWN -> "Unknown";
                default -> null;
            };
        }

        public String toCode() {
            return switch (this) {
                case MALE -> "male";
                case FEMALE -> "female";
                case OTHER -> "other";
                case UNKNOWN -> "unknown";
                default -> null;
            };
        }

        public Coding toCoding() {
            return switch (this) {
                case MALE -> new Coding().setSystem("http://hl7.org/fhir/administrative-gender").setCode("male");
                case FEMALE -> new Coding().setSystem("http://hl7.org/fhir/administrative-gender").setCode("female");
                case OTHER -> new Coding().setSystem("http://hl7.org/fhir/administrative-gender").setCode("other");
                case UNKNOWN -> new Coding().setSystem("http://hl7.org/fhir/administrative-gender").setCode("unknown");
                default -> null;
            };
        }

        public CodeableConcept toCodeableConcept() {
            Coding c = toCoding();
            return c == null ? null : new CodeableConcept().addCoding(c);
        }
    }

    @Min("0")
    @Max("1")
    @Doco("")
    private String id;  //

    @Min("1")
    @Max("*")
    @Doco("Extensões adicionais")
    @Definition("Extensões adicionais que não fazem parte do modelo base")
    private List<Extension> extensions = new ArrayList<>();// @NotNull  // Extensões adicionais

    @Min("0")
    @Max("1")
    @Doco("Local de nascimento do paciente")
    @Definition("Local de nascimento do paciente")
    private Address localNascimento;  // Local de nascimento do paciente

    @Min("0")
    @Max("1")
    @Doco("Identidade de gênero do paciente")
    @Definition("Identidade de gênero do paciente")
    private CodeableConcept identidadeGenero;  // Identidade de gênero do paciente

    @Min("1")
    @Max("1")
    @Doco("Raça do paciente")
    @Definition("Raça do paciente")
    private CodeableConcept raca;// @NotNull  // Raça do paciente

    @Min("0")
    @Max("1")
    @Doco("Afiliação do paciente")
    @Definition("Afiliação do paciente")
    private CodeableConcept povoIndigena;  // Afiliação do paciente

    @Min("0")
    @Max("1")
    @Doco("Sexo do nascimento do paciente")
    @Definition("Sexo do nascimento do paciente")
    private CodeableConcept sexoNascimento;  // Sexo do nascimento do paciente

    @Min("0")
    @Max("1")
    @Doco("Extensão de populacao tradicional do Core do Brasil")
    @Definition("Extensão de populacao tradicional do Core do Brasil")
    private CodeableConcept povoTradicional;  // Extensão de populacao tradicional do Core do Brasil

    @Min("0")
    @Max("1")
    @Doco("Extensão de povo intinerante do Core do Brasil")
    @Definition("Extensão de povo intinerante do Core do Brasil")
    private CodeableConcept povoItinerante;  // Extensão de povo intinerante do Core do Brasil

    @Min("0")
    @Max("*")
    @Doco("Extensões adicionais")
    @Definition("Extensões adicionais que não fazem parte do modelo base")
    private List<Extension> modifierExtensions = new ArrayList<>();  // Extensões adicionais

    @Min("1")
    @Max("*")
    @Doco("Identificadores nacionais do paciente")
    @Definition("Identificadores nacionais do paciente")
    private List<Identifier> identifiers = new ArrayList<>();// @NotNull  // Identificadores nacionais do paciente

    @Min("0")
    @Max("1")
    @Doco("Identificador do paciente")
    @Definition("Identificador do paciente")
    private Identifier cns;  // Identificador do paciente

    @Min("1")
    @Max("1")
    @Doco("Identificador do paciente")
    @Definition("Identificador do paciente")
    private Identifier cpf;// @NotNull  // Identificador do paciente

    @Min("0")
    @Max("1")
    @Doco("Identificador do paciente")
    @Definition("Identificador do paciente")
    private Identifier registroEstrangeiro;  // Identificador do paciente

    @Min("0")
    @Max("1")
    @Doco("Identificador do paciente")
    @Definition("Identificador do paciente")
    private Identifier passaporte;  // Identificador do paciente

    @Min("0")
    @Max("*")
    @Doco("Nome do paciente")
    @Definition("Nome do paciente")
    private List<HumanName> names = new ArrayList<>();  // Nome do paciente

    @Min("0")
    @Max("*")
    @Doco("Contatos de telecomunicação do paciente")
    @Definition("Contatos de telecomunicação do paciente")
    private List<ContactPoint> telecoms = new ArrayList<>();  // Contatos de telecomunicação do paciente

    @Min("1")
    @Max("1")
    @Doco("Sexo")
    @BindingStrength("required")
    @ValueSet("http://hl7.org/fhir/ValueSet/administrative-gender|4.0.1")
    @Definition("male | female | other | unknown")
    private AdministrativeGender gender;// @NotNull  // Sexo

    @Min("0")
    @Max("*")
    @Doco("Endereço do paciente")
    @Definition("Endereço do paciente")
    private List<Address> addresses = new ArrayList<>();  // Endereço do paciente

    @Min("0")
    @Max("*")
    @Doco("Uma pessoa para contato (guardião, companheiro, amigo) em caso de emergência")
    @Definition("Uma pessoa para contato (guardião, companheiro, amigo) em caso de emergência")
    private List<BackboneElement> contacts = new ArrayList<>();  // Uma pessoa para contato (guardião, companheiro, amigo) em caso de emergência

    @Min("0")
    @Max("*")
    @Doco("Idiomas falados pelo paciente")
    @Definition("A language which may be used to communicate with the patient about his or her health.")
    private List<BackboneElement> communications = new ArrayList<>();  // Idiomas falados pelo paciente

    @Min("0")
    @Max("*")
    @Doco("Médico de atenção primária do paciente")
    @Definition("Médico de atenção primária do paciente")
    private List<Reference> generalPractitioners = new ArrayList<>();  // Médico de atenção primária do paciente

    @Min("0")
    @Max("1")
    @Doco("Organização responsável pelo paciente")
    @Definition("Organização responsável pelo paciente")
    private Reference managingOrganization;  // Organização responsável pelo paciente

    @Min("0")
    @Max("*")
    @Doco("Links para outros recursos que se relacionam com este recurso")
    @Definition("Links para outros recursos que se relacionam com este recurso")
    private List<BackboneElement> links = new ArrayList<>();  // Links para outros recursos que se relacionam com este recurso


    /**
     * Parameter-less constructor.
     */
    public BRCorePatient() {
    }

    /**
     * Construct an instance of the object, and fill out all the fixed values
     */
    public BRCorePatient(IWorkerContext context) {
        workerContext = context;
        PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
        PEInstance src = builder.buildPEInstance(CANONICAL_URL, builder.createResource(CANONICAL_URL, false));
        load(src);
    }

    /**
     * Populate an instance of the object based on this source object
     */
    public static BRCorePatient fromSource(IWorkerContext context, Patient source) {
        BRCorePatient theThing = new BRCorePatient();
        theThing.workerContext = context;
        PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
        PEInstance src = builder.buildPEInstance(CANONICAL_URL, source);
        theThing.load(src);
        return theThing;
    }


    public void load(PEInstance src) {
        clear();
        if (src.hasChild("id")) {
            id = ((IdType) src.child("id").asDataType()).getValue();
        }
        for (PEInstance item : src.children("extension")) {
            extensions.add((Extension) item.asDataType());
        }
        if (src.hasChild("localNascimento")) {
            localNascimento = (Address) src.child("localNascimento").asDataType();
        }
        if (src.hasChild("identidadeGenero")) {
            identidadeGenero = (CodeableConcept) src.child("identidadeGenero").asDataType();
        }
        if (src.hasChild("raca")) {
            raca = (CodeableConcept) src.child("raca").asDataType();
        }
        if (src.hasChild("povoIndigena")) {
            povoIndigena = (CodeableConcept) src.child("povoIndigena").asDataType();
        }
        if (src.hasChild("sexoNascimento")) {
            sexoNascimento = (CodeableConcept) src.child("sexoNascimento").asDataType();
        }
        if (src.hasChild("povoTradicional")) {
            povoTradicional = (CodeableConcept) src.child("povoTradicional").asDataType();
        }
        if (src.hasChild("povoItinerante")) {
            povoItinerante = (CodeableConcept) src.child("povoItinerante").asDataType();
        }
        for (PEInstance item : src.children("modifierExtension")) {
            modifierExtensions.add((Extension) item.asDataType());
        }
        for (PEInstance item : src.children("identifier")) {
            identifiers.add((Identifier) item.asDataType());
        }
        if (src.hasChild("cns")) {
            cns = (Identifier) src.child("cns").asDataType();
        }
        if (src.hasChild("cpf")) {
            cpf = (Identifier) src.child("cpf").asDataType();
        }
        if (src.hasChild("registroEstrangeiro")) {
            registroEstrangeiro = (Identifier) src.child("registroEstrangeiro").asDataType();
        }
        if (src.hasChild("passaporte")) {
            passaporte = (Identifier) src.child("passaporte").asDataType();
        }
        for (PEInstance item : src.children("name")) {
            names.add((HumanName) item.asDataType());
        }
        for (PEInstance item : src.children("telecom")) {
            telecoms.add((ContactPoint) item.asDataType());
        }
        if (src.hasChild("gender")) {
            gender = AdministrativeGender.fromCode(src.child("gender").asDataType().primitiveValue());
        }
        for (PEInstance item : src.children("address")) {
            addresses.add((Address) item.asDataType());
        }
        for (PEInstance item : src.children("contact")) {
            contacts.add((BackboneElement) item.asElement());
        }
        for (PEInstance item : src.children("communication")) {
            communications.add((BackboneElement) item.asElement());
        }
        for (PEInstance item : src.children("generalPractitioner")) {
            generalPractitioners.add((Reference) item.asDataType());
        }
        if (src.hasChild("managingOrganization")) {
            Reference ref = (Reference) src.child("managingOrganization").asDataType();
            if (!ref.isEmpty())
                managingOrganization = ref;
        }
        for (PEInstance item : src.children("link")) {
            links.add((BackboneElement) item.asElement());
        }

    }

    /**
     * Build a instance of the underlying object based on this wrapping object
     */
    public Patient build(IWorkerContext context) {
        workerContext = context;
        return build();
    }

    /**
     * Build a instance of the underlying object based on this wrapping object
     */
    public Patient build() {
        Patient theThing = new Patient();
        PEBuilder builder = new PEBuilder(workerContext, PEElementPropertiesPolicy.EXTENSION, true);
        PEInstance tgt = builder.buildPEInstance(CANONICAL_URL, theThing);
        save(tgt, false);
        return theThing;
    }

    /**
     * Save this profile class into an existing resource (overwriting anything that
     * exists in the profile)
     */
    public void save(IWorkerContext context, Patient dest, boolean nulls) {
        workerContext = context;
        PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
        PEInstance tgt = builder.buildPEInstance(CANONICAL_URL, dest);
        save(tgt, nulls);
    }

    public void save(PEInstance tgt, boolean nulls) {
        tgt.clear("id");
        if (id != null) {
            tgt.makeChild("id").data().setProperty("value", new IdType(id));
        }
        tgt.clear("extension");
        for (Extension item : extensions) {
            tgt.addChild("extension", item);
        }
        tgt.clear("localNascimento");
        if (localNascimento != null) {
            tgt.makeChild("localNascimento").data().setProperty("value[x]", localNascimento);
        }
        tgt.clear("identidadeGenero");
        if (identidadeGenero != null) {
            tgt.makeChild("identidadeGenero").data().setProperty("value[x]", identidadeGenero);
        }
        tgt.clear("raca");
        if (raca != null) {
            tgt.makeChild("raca").data().setProperty("value[x]", raca);
        }
        tgt.clear("povoIndigena");
        if (povoIndigena != null) {
            tgt.makeChild("povoIndigena").data().setProperty("value[x]", povoIndigena);
        }
        tgt.clear("sexoNascimento");
        if (sexoNascimento != null) {
            tgt.makeChild("sexoNascimento").data().setProperty("value[x]", sexoNascimento);
        }
        tgt.clear("povoTradicional");
        if (povoTradicional != null) {
            tgt.makeChild("povoTradicional").data().setProperty("value[x]", povoTradicional);
        }
        tgt.clear("povoItinerante");
        if (povoItinerante != null) {
            tgt.makeChild("povoItinerante").data().setProperty("value[x]", povoItinerante);
        }
        tgt.clear("modifierExtension");
        for (Extension item : modifierExtensions) {
            tgt.addChild("modifierExtension", item);
        }
        tgt.clear("identifier");
        for (Identifier item : identifiers) {
            tgt.addChild("identifier", item);
        }
        tgt.clear("cns");
        if (cns != null) {
            tgt.addChild("cns", cns);
        }
        tgt.clear("cpf");
        if (cpf != null) {
            tgt.addChild("cpf", cpf);
        }
        tgt.clear("registroEstrangeiro");
        if (registroEstrangeiro != null) {
            tgt.addChild("registroEstrangeiro", registroEstrangeiro);
        }
        tgt.clear("passaporte");
        if (passaporte != null) {
            tgt.addChild("passaporte", passaporte);
        }
        tgt.clear("name");
        for (HumanName item : names) {
            tgt.addChild("name", item);
        }
        tgt.clear("telecom");
        for (ContactPoint item : telecoms) {
            tgt.addChild("telecom", item);
        }
        tgt.clear("gender");
        if (gender != null) {
            tgt.addChild("gender", gender.toCode());
        }
        tgt.clear("address");
        for (Address item : addresses) {
            tgt.addChild("address", item);
        }
        tgt.clear("contact");
        for (BackboneElement item : contacts) {
            tgt.addChild("contact", item);
        }
        tgt.clear("communication");
        for (BackboneElement item : communications) {
            tgt.addChild("communication", item);
        }
        tgt.clear("generalPractitioner");
        for (Reference item : generalPractitioners) {
            tgt.addChild("generalPractitioner", item);
        }
        tgt.clear("managingOrganization");
        if (managingOrganization != null) {
            tgt.addChild("managingOrganization", managingOrganization);
        }
        tgt.clear("link");
        for (BackboneElement item : links) {
            tgt.addChild("link", item);
        }

    }

    public String getId() {
        return id;
    }

    public BRCorePatient setId(String value) {
        this.id = value;
        return this;
    }

    public boolean hasId() {
        return id != null;
    }

    /**
     * Extensões adicionais que não fazem parte do modelo base
     */
    public List<Extension> getExtensions() {
        if (extensions == null) {
            extensions = new ArrayList<>();
        }
        return extensions;
    }

    public boolean hasExtensions() {
        return extensions != null && !extensions.isEmpty();
    }

    public Extension addExtension() {
        Extension theThing = new Extension();
        getExtensions().add(theThing);
        return theThing;
    }

    public boolean hasExtension(Extension item) {
        return hasExtensions() && extensions.contains(item);
    }

    public void removeExtension(Extension item) {
        if (hasExtension(item)) {
            extensions.remove(item);
        }
    }


    /**
     * Local de nascimento do paciente
     */
    public Address getLocalNascimento() {
        if (localNascimento == null) {
            localNascimento = new Address();
        }
        return localNascimento;
    }

    public BRCorePatient setLocalNascimento(Address value) {
        this.localNascimento = value;
        return this;
    }

    public boolean hasLocalNascimento() {
        return localNascimento != null;
    }

    /**
     * Identidade de gênero do paciente
     */
    public CodeableConcept getIdentidadeGenero() {
        if (identidadeGenero == null) {
            identidadeGenero = new CodeableConcept();
        }
        return identidadeGenero;
    }

    public BRCorePatient setIdentidadeGenero(CodeableConcept value) {
        this.identidadeGenero = value;
        return this;
    }

    public boolean hasIdentidadeGenero() {
        return identidadeGenero != null;
    }

    /**
     * Raça do paciente
     */
    public CodeableConcept getRaca() {
        if (raca == null) {
            raca = new CodeableConcept();
        }
        return raca;
    }

    public BRCorePatient setRaca(CodeableConcept value) {
        this.raca = value;
        return this;
    }

    public boolean hasRaca() {
        return raca != null;
    }

    /**
     * Afiliação do paciente
     */
    public CodeableConcept getPovoIndigena() {
        if (povoIndigena == null) {
            povoIndigena = new CodeableConcept();
        }
        return povoIndigena;
    }

    public BRCorePatient setPovoIndigena(CodeableConcept value) {
        this.povoIndigena = value;
        return this;
    }

    public boolean hasPovoIndigena() {
        return povoIndigena != null;
    }

    /**
     * Sexo do nascimento do paciente
     */
    public CodeableConcept getSexoNascimento() {
        if (sexoNascimento == null) {
            sexoNascimento = new CodeableConcept();
        }
        return sexoNascimento;
    }

    public BRCorePatient setSexoNascimento(CodeableConcept value) {
        this.sexoNascimento = value;
        return this;
    }

    public boolean hasSexoNascimento() {
        return sexoNascimento != null;
    }

    /**
     * Extensão de populacao tradicional do Core do Brasil
     */
    public CodeableConcept getPovoTradicional() {
        if (povoTradicional == null) {
            povoTradicional = new CodeableConcept();
        }
        return povoTradicional;
    }

    public BRCorePatient setPovoTradicional(CodeableConcept value) {
        this.povoTradicional = value;
        return this;
    }

    public boolean hasPovoTradicional() {
        return povoTradicional != null;
    }

    /**
     * Extensão de povo intinerante do Core do Brasil
     */
    public CodeableConcept getPovoItinerante() {
        if (povoItinerante == null) {
            povoItinerante = new CodeableConcept();
        }
        return povoItinerante;
    }

    public BRCorePatient setPovoItinerante(CodeableConcept value) {
        this.povoItinerante = value;
        return this;
    }

    public boolean hasPovoItinerante() {
        return povoItinerante != null;
    }

    /**
     * Extensões adicionais que não fazem parte do modelo base
     */
    public List<Extension> getModifierExtensions() {
        if (modifierExtensions == null) {
            modifierExtensions = new ArrayList<>();
        }
        return modifierExtensions;
    }

    public boolean hasModifierExtensions() {
        return modifierExtensions != null && !modifierExtensions.isEmpty();
    }

    public Extension addModifierExtension() {
        Extension theThing = new Extension();
        getModifierExtensions().add(theThing);
        return theThing;
    }

    public boolean hasModifierExtension(Extension item) {
        return hasModifierExtensions() && modifierExtensions.contains(item);
    }

    public void removeModifierExtension(Extension item) {
        if (hasModifierExtension(item)) {
            modifierExtensions.remove(item);
        }
    }


    /**
     * Identificadores nacionais do paciente
     */
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<>();
        }
        return identifiers;
    }

    public boolean hasIdentifiers() {
        return identifiers != null && !identifiers.isEmpty();
    }

    public Identifier addIdentifier() {
        Identifier theThing = new Identifier();
        getIdentifiers().add(theThing);
        return theThing;
    }

    public boolean hasIdentifier(Identifier item) {
        return hasIdentifiers() && identifiers.contains(item);
    }

    public void removeIdentifier(Identifier item) {
        if (hasIdentifier(item)) {
            identifiers.remove(item);
        }
    }


    /**
     * Identificador do paciente
     */
    public Identifier getCns() {
        if (cns == null) {
            cns = new Identifier();
        }
        return cns;
    }

    public BRCorePatient setCns(Identifier value) {
        this.cns = value;
        return this;
    }

    public boolean hasCns() {
        return cns != null;
    }

    /**
     * Identificador do paciente
     */
    public Identifier getCpf() {
        if (cpf == null) {
            cpf = new Identifier();
        }
        return cpf;
    }

    public BRCorePatient setCpf(Identifier value) {
        this.cpf = value;
        return this;
    }

    public boolean hasCpf() {
        return cpf != null;
    }

    /**
     * Identificador do paciente
     */
    public Identifier getRegistroEstrangeiro() {
        if (registroEstrangeiro == null) {
            registroEstrangeiro = new Identifier();
        }
        return registroEstrangeiro;
    }

    public BRCorePatient setRegistroEstrangeiro(Identifier value) {
        this.registroEstrangeiro = value;
        return this;
    }

    public boolean hasRegistroEstrangeiro() {
        return registroEstrangeiro != null;
    }

    /**
     * Identificador do paciente
     */
    public Identifier getPassaporte() {
        if (passaporte == null) {
            passaporte = new Identifier();
        }
        return passaporte;
    }

    public BRCorePatient setPassaporte(Identifier value) {
        this.passaporte = value;
        return this;
    }

    public boolean hasPassaporte() {
        return passaporte != null;
    }

    /**
     * Nome do paciente
     */
    public List<HumanName> getNames() {
        if (names == null) {
            names = new ArrayList<>();
        }
        return names;
    }

    public boolean hasNames() {
        return names != null && !names.isEmpty();
    }

    public HumanName addName() {
        HumanName theThing = new HumanName();
        getNames().add(theThing);
        return theThing;
    }

    public boolean hasName(HumanName item) {
        return hasNames() && names.contains(item);
    }

    public void removeName(HumanName item) {
        if (hasName(item)) {
            names.remove(item);
        }
    }


    /**
     * Contatos de telecomunicação do paciente
     */
    public List<ContactPoint> getTelecoms() {
        if (telecoms == null) {
            telecoms = new ArrayList<>();
        }
        return telecoms;
    }

    public boolean hasTelecoms() {
        return telecoms != null && !telecoms.isEmpty();
    }

    public ContactPoint addTelecom() {
        ContactPoint theThing = new ContactPoint();
        getTelecoms().add(theThing);
        return theThing;
    }

    public boolean hasTelecom(ContactPoint item) {
        return hasTelecoms() && telecoms.contains(item);
    }

    public void removeTelecom(ContactPoint item) {
        if (hasTelecom(item)) {
            telecoms.remove(item);
        }
    }


    /**
     * male | female | other | unknown
     */
    public AdministrativeGender getGender() {
        return gender;
    }

    public BRCorePatient setGender(AdministrativeGender value) {
        this.gender = value;
        return this;
    }

    public boolean hasGender() {
        return gender != null;
    }

    /**
     * Endereço do paciente
     */
    public List<Address> getAddresses() {
        if (addresses == null) {
            addresses = new ArrayList<>();
        }
        return addresses;
    }

    public boolean hasAddresses() {
        return addresses != null && !addresses.isEmpty();
    }

    public BRCorePatient addAddress(Address address) {
        getAddresses().add(address);
        return this;
    }

    public boolean hasAddress(Address item) {
        return hasAddresses() && addresses.contains(item);
    }

    public void removeAddress(Address item) {
        if (hasAddress(item)) {
            addresses.remove(item);
        }
    }


    /**
     * Uma pessoa para contato (guardião, companheiro, amigo) em caso de emergência
     */
    public List<BackboneElement> getContacts() {
        if (contacts == null) {
            contacts = new ArrayList<>();
        }
        return contacts;
    }

    public boolean hasContacts() {
        return contacts != null && !contacts.isEmpty();
    }

    public boolean hasContact(BackboneElement item) {
        return hasContacts() && contacts.contains(item);
    }

    public void removeContact(BackboneElement item) {
        if (hasContact(item)) {
            contacts.remove(item);
        }
    }


    /**
     * A language which may be used to communicate with the patient about his or her
     * health.
     */
    public List<BackboneElement> getCommunications() {
        if (communications == null) {
            communications = new ArrayList<>();
        }
        return communications;
    }

    public boolean hasCommunications() {
        return communications != null && !communications.isEmpty();
    }

    public boolean hasCommunication(BackboneElement item) {
        return hasCommunications() && communications.contains(item);
    }

    public void removeCommunication(BackboneElement item) {
        if (hasCommunication(item)) {
            communications.remove(item);
        }
    }


    /**
     * Médico de atenção primária do paciente
     */
    public List<Reference> getGeneralPractitioners() {
        if (generalPractitioners == null) {
            generalPractitioners = new ArrayList<>();
        }
        return generalPractitioners;
    }

    public boolean hasGeneralPractitioners() {
        return generalPractitioners != null && !generalPractitioners.isEmpty();
    }

    public Reference addGeneralPractitioner() {
        Reference theThing = new Reference();
        getGeneralPractitioners().add(theThing);
        return theThing;
    }

    public boolean hasGeneralPractitioner(Reference item) {
        return hasGeneralPractitioners() && generalPractitioners.contains(item);
    }

    public void removeGeneralPractitioner(Reference item) {
        if (hasGeneralPractitioner(item)) {
            generalPractitioners.remove(item);
        }
    }


    /**
     * Organização responsável pelo paciente
     */
    public Reference getManagingOrganization() {
        if (managingOrganization == null) {
            managingOrganization = new Reference();
        }
        return managingOrganization;
    }

    public BRCorePatient setManagingOrganization(Reference value) {
        this.managingOrganization = value;
        return this;
    }

    public boolean hasManagingOrganization() {
        return managingOrganization != null;
    }

    /**
     * Links para outros recursos que se relacionam com este recurso
     */
    public List<BackboneElement> getLinks() {
        if (links == null) {
            links = new ArrayList<>();
        }
        return links;
    }

    public boolean hasLinks() {
        return links != null && !links.isEmpty();
    }

    public boolean hasLink(BackboneElement item) {
        return hasLinks() && links.contains(item);
    }

    public void removeLink(BackboneElement item) {
        if (hasLink(item)) {
            links.remove(item);
        }
    }


    public void clear() {
        id = null;
        extensions.clear();
        localNascimento = null;
        identidadeGenero = null;
        raca = null;
        povoIndigena = null;
        sexoNascimento = null;
        povoTradicional = null;
        povoItinerante = null;
        modifierExtensions.clear();
        identifiers.clear();
        cns = null;
        cpf = null;
        registroEstrangeiro = null;
        passaporte = null;
        names.clear();
        telecoms.clear();
        gender = null;
        addresses.clear();
        contacts.clear();
        communications.clear();
        generalPractitioners.clear();
        managingOrganization = null;
        links.clear();

    }

    public void setCns(String cns) {
        if (StringUtils.isNotBlank(cns)) {
            this.setCns(new Identifier()
                    .setUse(Identifier.IdentifierUse.OFFICIAL)
                    .setSystem("https://saude.gov.br/fhir/sid/cns")
                    .setValue(cns)
                    .setType(
                            new CodeableConcept()
                                    .addCoding(
                                            new Coding()
                                                    .setSystem("http://terminology.hl7.org/CodeSystem/v2-0203")
                                                    .setCode("HC")
                                                    .setDisplay("Health Card Number")
                                    )
                    ));
        }
    }

    public void setCpf(String cpf) {
        if (StringUtils.isNotBlank(cpf)) {
            this.setCpf(new Identifier()
                    .setUse(Identifier.IdentifierUse.OFFICIAL)
                    .setSystem("https://saude.gov.br/fhir/sid/cpf")
                    .setValue(cpf)
                    .setType(
                            new CodeableConcept()
                                    .addCoding(
                                            new Coding()
                                                    .setSystem("http://terminology.hl7.org/CodeSystem/v2-0203")
                                                    .setCode("TAX")
                                                    .setDisplay("Tax ID number")
                                    )
                    ));
        }
    }

    public void setIdentidadeGenero(IdentidadeGenero genero) {
        this.setIdentidadeGenero(new CodeableConcept()
                .addCoding(new Coding()
                        .setSystem("http://snomed.info/sct")
                        .setCode(genero.getLoinc())
                        .setDisplay(genero.getDescription())));
    }

    public void setSexoNascimento(Sexo sexo) {
        this.setSexoNascimento(new CodeableConcept()
                .addCoding(new Coding()
                        .setSystem("http://hl7.org/fhir/administrative-gender")
                        .setCode(sexo.getCode())
                        .setDisplay(sexo.getDescription())));
    }

    public void setRaca(RacaCor raca) {
        this.setRaca(new CodeableConcept()
                .addCoding(new Coding()
                        .setSystem("https://terminologia.saude.gov.br/fhir/CodeSystem/BRRacaCor")
                        .setCode(raca.getCode())
                        .setDisplay(raca.getDescription())));
    }

    public static HumanName createHumanName(String name) {
        var splittedName = StringUtils.split(name, " ");
        var humanName = new HumanName()
                .setFamily(splittedName[splittedName.length - 1]);

        if (splittedName.length > 1) {
            for (int i = 0; i < splittedName.length - 2; i++) {
                humanName.addGiven(splittedName[i]);
            }
        }
        return humanName;
    }

    public void setName(String name) {
        this.getNames().add(createHumanName(name));
    }

}
